set nocompatible              " be iMproved, required

" Loading vundle and plugins
so ~/.vim/plugins.vim

" Configuration
syntax on
set relativenumber
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smartindent
set hlsearch
set incsearch
set cursorline
set smartcase
set list
set clipboard=unnamed
set listchars=eol:Â¬,tab:>-,trail:~,extends:>,precedes:<
" Automatically write when switching buffer
set autowriteall

" Turning off bell sounds
set noerrorbells visualbell t_vb=

" Make backspace behave like every other editor.
set backspace =indent,eol,start		

" Autocmds
augroup vue 
		autocmd!
		autocmd FileType vue syntax sync fromstart
augroup END

" Colors and font
colorscheme Tomorrow-Night-Bright

set t_CO=256
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

" Spli Management
set splitbelow
set splitright

" Mappings

" remap leader key
let mapleader=","

map <leader>n :NERDTreeToggle<CR>
map <leader>s :source ~/.vim/vimrc<CR>
map <leader>pli :PluginInstall<CR>
map <leader>evr :e ~/.vim/vimrc<CR>
map <leader>evp :e ~/.vim/plugins.vim<CR>
map <leader>light :colorscheme Tomorrow<CR>
map <leader>dark :colorscheme Tomorrow-Night-Bright<CR>
map <leader>wdift :windo diffthis<CR>
map <leader>wdifo :windo diffoff<CR>


nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>

" Command T ignore list
	let g:CommandTWildIgnore=&wildignore . ",*/node_modules"

" greplace.vim
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

" ultisnip
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-f>"
let g:UltiSnipsJumpBackwardTrigger="<S-C-s>"
let g:UltisnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

set runtimepath+=~/.vim/snippets
let g:UltiSnipsSnippetsDir = "~/.vim/snippets/UltiSnips"

let g:ft = ''
function! NERDCommenter_before()
		if &ft == 'vue'
				let g:ft = 'vue'
						let stack = synstack(line('.'), col('.'))
						if len(stack) > 0
										let syn = synIDattr((stack)[0], 'name')
						if len(syn) > 0
										exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
						endif
				endif
		endif
endfunction
function! NERDCommenter_after()
				if g:ft == 'vue'
								setf vue
								let g:ft = ''
				endif
	endfunction
